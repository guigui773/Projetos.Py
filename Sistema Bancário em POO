from abc import ABC, abstractmethod, abstractclassmethod
import datetime


class Cliente:
    def __init__(self, endereco):
        self.endereco = endereco
        self.contas = []

    def realizar_transacao(self, conta, transacao):
        transacao.registrar (conta)

    def adicionar_conta(self, conta):
        self.contas.append(conta)

class PessoaFisica (Cliente):
    def __init__(self,nome, data_nascimento, cpf, endereco):
        super().__init__(endereco)
        self.nome = nome
        self.data_nascimento = data_nascimento 
        self.cpf = cpf 

class Conta:
    def _init_(self, numero, cliente, Historico):
        self. saldo = 0
        self. numero = numero
        self. agencia = "0001"
        self. cliente = cliente
        self. historico = Historico()

    @classmethod
    def nova_conta(cls, cliente, numero):
        return cls(numero, cliente)
    @property
    def saldo(self):
        return self._saldo
    @property
    def numero(self):
        return self._numero
    @property
    def agencia(self):
        return self._agencia
    @property
    def cliente(self):
        return self._cliente
    @property
    def historico(self):
        return self._historico
    
    def sacar(self, valor): 
        saldo = self.saldo
        excedeu_saldo = valor > saldo

        if excedeu_saldo: 
            print(" Operação falhou! Você não ten saldo suficiente. ")

        elif valor > 0:
            self._saldo -= valor
            print(" Saque realizado com sucesso!")
            return True
    
        else: 
            print("Operação falhout O valor informado é inválido.")
        return False
    
    def depositar(self, valor):
      if valor:
        self._saldo += valor 
        print("\n Depósito realizado con sucesso! ")
      else:
        print("\naaa Operação falhou! O valor informado é inválido. aaa")
        return False
      return True
    
class ContaCorrente(Conta):
    def _init(self, numero, cliente, limite = 500,limite_saques= 3):
        super()._init_(numero, cliente)
        self.limite = limite
        self.limite_saques =  limite_saques
        
    def sacar(self, valor):
        numero_saques = len(
            [transacao for transacao in self.historico.transacoes if transacao["tipo"] == "Saque"]
        )
        excedeu_limite = valor > self.limite
        excedeu_saques = numero_saques >= self.limite_saques   

        if excedeu_limite:
           print(" Operação falhou! O valor do saque excede o limite.")
        elif excedeu_saques:
           print(" Operação falhou! Número máximo de saques excedido. ")
        else:
           return super().sacar (valor)
        return False 
    def __str__(self):
        return f"Agência: {self.agencia}, C/C: {self.numero}, Titular: {self.cliente.nome}"
    


class Historico:
    def __init__(self):
        self.transacoes = []

    @property
    def transacoes(self):
        return self.transacoes

    def adicionar_transacao(self, transacao):
        self.transacoes.append({
            "tipo": transacao.__class__.__name__,
            "valor": transacao.valor,
            "data": datetime.now().strftime("%d-%m-%Y %H:%M:%S")
        })

class Transacao(ABC):
    
    @property
    @abstractmethod
    def valor(self):
        pass
    
    @abstractclassmethod
    def registrar(self, conta): 
        pass

class Saque(Transacao):
    def _init_(self, valor):
      self.valor = valor
    @property
    def valor(self):
     return self._valor
    def registrar(self, conta):
        sucesso_transacao = conta.sacar(self.valor)
        if sucesso_transacao:
         conta.historico.adicionar_transacao(self)

class Deposito(Transacao):
    def __init__(self, valor):
      self.valor = valor
    @property
    def valor(self):
     return self._valor
    def registrar(self, conta):
        sucesso_transacao = conta.depositar(self.valor)
   
        if sucesso_transacao:
         conta.historico.adicionar_transacao(self)
